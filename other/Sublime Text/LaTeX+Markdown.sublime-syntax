%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: LaTeX+Markdown
scope: text.tex.latex, text.html.markdown

file_extensions:
  - tex
  - ltx
  - md
  - markdown

variables:
    thematic_break: |-
        (?x:
            [ ]{,3}                          # between 0 to 3 spaces
            (?:                              # followed by one of the following:
                    [-](?:[ ]{,2}[-]){2,}    # - a dash,        followed by the following at least twice: between 0 to 2 spaces followed by a dash
                |   [*](?:[ ]{,2}[*]){2,}    # - a star,        followed by the following at least twice: between 0 to 2 spaces followed by a star
                |   [_](?:[ ]{,2}[_]){2,}    # - an underscore, followed by the following at least twice: between 0 to 2 spaces followed by an underscore
            )
            [ \t]*$                          # followed by any number of tabs or spaces, followed by the end of the line
        )
    block_quote: (?:[ ]{,3}(>)[ ]?)          # between 0 and 3 spaces, followed by a greater than sign, (followed by any character or the end of the line = "only care about optional space!")
    atx_heading: (?:[ ]{,3}[#]{1,6}(?:[ \t]|$))  # between 0 and 3 spaces, followed 1 to 6 hashes, followed by at least one space or tab or by end of the line
    atx_heading_space: (?:(?=[ \t]+#+[ \t]*$)|[ \t]+|$) # consume spaces only if heading is not empty to ensure `atx_heading_end` can fully match closing hashes
    atx_heading_end: (?:[ \t]+(#+))?[ \t]*($\n?) # \n is optional so ## is matched as end punctuation in new document (at eof)
    setext_escape: ^(?=[ ]{,3}(?:=+|-+)\s*$)     # between 0 and 3 spaces, followed by at least one hyphon or equal sign (setext underline can be of any length)
    indented_code_block: (?:[ ]{4}|\t)           # 4 spaces or a tab
    list_item: (?:[ ]{,3}(?:\d+[.)]|[*+-])\s)    # between 0 and 3 spaces, followed by either: at least one integer and a full stop or a parenthesis, or (a star, plus or dash), followed by whitespace
    escape: '\\[-`*_#+.!(){}\[\]\\>|~<]'
    backticks: |-
        (?x:
            (`{4})(?![\s`])(?:[^`]+(?=`)|(?!`{4})`+(?!`))+(`{4})(?!`)  # 4 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 4 backticks, or at least one non backtick character) at least once, followed by exactly 4 backticks
        |   (`{3})(?![\s`])(?:[^`]+(?=`)|(?!`{3})`+(?!`))+(`{3})(?!`)  # 3 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 3 backticks, or at least one non backtick character) at least once, followed by exactly 3 backticks
        |   (`{2})(?![\s`])(?:[^`]+(?=`)|(?!`{2})`+(?!`))+(`{2})(?!`)  # 2 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 2 backticks, or at least one non backtick character) at least once, followed by exactly 2 backticks
        |   (`{1})(?![\s`])(?:[^`]+(?=`)|(?!`{1})`+(?!`))+(`{1})(?!`)  # 1 backtick,  followed by at least one non whitespace, non backtick character, followed by (                          at least one non backtick character) at least once, followed by exactly 1 backtick
        )
    balance_square_brackets: |-
        (?x:
          (?:
            {{escape}}+                 # escape characters
          | [^\[\]`\\]+(?=[\[\]`\\]|$)  # anything that isn't a square bracket or a backtick or the start of an escape character
          | {{backticks}}               # inline code
          | \[(?:                       # nested square brackets (one level deep)
                [^\[\]`]+(?=[\[\]`])    #  anything that isn't a square bracket or a backtick
                {{backticks}}?          #  balanced backticks
              )*\]                      #  closing square bracket
          )+                            # at least one character
        )
    html_entity: '&([a-zA-Z0-9]+|#\d+|#x\h+);'
    skip_html_tags: (?:<[^>]+>)
    balance_square_brackets_and_emphasis: |-
        (?x:
          (?:
            {{escape}}+                     # escape characters
          | [^\[\]`\\_*]+(?=[\[\]`\\_*]|$)  # anything that isn't a square bracket, a backtick, the start of an escape character, or an emphasis character
          | {{backticks}}                   # inline code
          | \[(?:                           # nested square brackets (one level deep)
                [^\[\]`]+(?=[\[\]`])        #  anything that isn't a square bracket or a backtick
                {{backticks}}?              #  balanced backticks
              )*\]                          #  closing square bracket
          )+                                # at least one character
        )
    balance_square_brackets_pipes_and_emphasis: |-
        (?x:
          (?:
            {{escape}}+                     # escape characters
          | [^\[\]`\\_*|]+(?=[\[\]`\\_*|]|$)  # anything that isn't a square bracket, a backtick, the start of an escape character, or an emphasis character
          | {{backticks}}                   # inline code
          | \[(?:                           # nested square brackets (one level deep)
                [^\[\]`]+(?=[\[\]`])        #  anything that isn't a square bracket or a backtick
                {{backticks}}?              #  balanced backticks
              )*\]                          #  closing square bracket
          )+                                # at least one character
        )
    balanced_emphasis: |-
      (?x:
          \*  (?!\*){{balance_square_brackets_and_emphasis}}+\*  (?!\*)
      |   \*\*      {{balance_square_brackets_and_emphasis}}+\*\*
      |   _   (?!_) {{balance_square_brackets_and_emphasis}}+_   (?!_)
      |   __        {{balance_square_brackets_and_emphasis}}+__
      )
    balanced_table_cell: |- # Pipes inside other inline spans (such as emphasis, code, etc.) will not break a cell, emphasis in table cells can't span multiple lines
      (?x:
        (?:
          {{balance_square_brackets_pipes_and_emphasis}}
        | {{balanced_emphasis}}
        )+                                # at least one character
      )
    table_first_row: |-
        (?x:
          # at least 2 non-escaped pipe chars on the line
          (?:{{balanced_table_cell}}?\|){2}

          # something other than whitespace followed by a pipe char or hyphon,
          # followed by something other than whitespace and the end of the line
        | (?! \s*\-\s+ | \s+\|){{balanced_table_cell}}\|(?!\s+$)
        )
    fenced_code_block_start: |-
        (?x:
          ([ \t]*)
          (
            (`){3,}    #   3 or more backticks
            (?![^`]*`) #   not followed by any more backticks on the same line
          |            # or
            (~){3,}    #   3 or more tildas
            (?![^~]*~) #   not followed by any more tildas on the same line
          )
          \s*          # allow for whitespace between code block start and info string
        )
    fenced_code_block_language: |-
      (?x:             # first word of an infostring is used as language specifier
        (
          [[:alpha:]]  # starts with a letter to make sure not to hit any attribute annotation
          [^`\s]*      # optionally followed by any nonwhitespace character (except backticks)
        )
      )
    fenced_code_block_trailing_infostring_characters: |-
        (?x:
          (
            \s*        # any whitespace, or ..
          |
            \s[^`]*    # any characters (except backticks), separated by whitespace ...
          )
          $\n?         # ... until EOL
        )
    code_fence_escape: ^{{code_fence_end}}
    code_fence_end: |-
      (?x:
        [ \t]*
        (
          \2          # the backtick/tilde combination that opened the code fence
          (?:\3|\4)*  # plus optional additional closing characters
        )
        \s*$\n?       # any amount of whitespace until EOL
      )
    html_tag_open_commonmark: |-
      (?xi:
        <
        [a-z]             # A tag name consists of an ASCII letter
        [a-z0-9-]*        # followed by zero or more ASCII letters, digits, or hyphens (-)
        (?:               # An attribute consists of whitespace, an attribute name, and an optional attribute value specification
          \s+
          [a-z_:]         # An attribute name consists of an ASCII letter, _, or :
          [a-z0-9_.:-]*   # followed by zero or more ASCII letters, digits, _, ., :, or -
          (?:             # An attribute value specification consists of optional whitespace, a = character, optional whitespace, and an attribute value
            \s*
            =
            \s*
            (?:
              [^ @'=<>`]+ # An unquoted attribute value is a nonempty string of characters not including spaces, ", ', =, <, >, or `
            | '[^']*'     # A single-quoted attribute value consists of ', zero or more characters not including ', and a final '
            | "[^"]*"     # A double-quoted attribute value consists of ", zero or more characters not including ", and a final "
            )
          )?
        )*
        \s*
        /?
        >
      )
    html_tag_close_commonmark: |-
      (?xi:
        </
        [a-z]             # A tag name consists of an ASCII letter
        [a-z0-9-]*        # followed by zero or more ASCII letters, digits, or hyphens (-)
        \s*
        >
      )
    html_tag_block_end_at_close_tag: |-
      (?xi:
        (script|style|pre)\b
      )
    html_tag_block_end_at_blank_line: |-
      (?x:
        /?
        (?i:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)
        (?:\s|$|/?>)
      )
    ascii_space: '\t\n\f '
    tag_attribute_name_start: (?=[^{{ascii_space}}=/>}])
    tag_attribute_name_break: (?=[{{ascii_space}}=/>}])
    tag_unquoted_attribute_start: (?=[^{{ascii_space}}=/>}])
    tag_unquoted_attribute_break: (?=[{{ascii_space}}}]|/?>)

first_line_match: |-
  (?xi:
    ^ \s* \%+ .*? -\*- .*? \blatex\b .*? -\*-  # editorconfig
  )

contexts:
  prototype:
    - include: comments

  main:
    - include: unique-latex
    - include: packages
    - include: plain-tex
    - include: begin-end-commands
    - include: general-commands
    - include: global-braces
    - include: frontmatter
    - include: markdown

  unique-latex:
    - include: preamble
    - include: structure
    - include: includes
    - include: sections
    - include: text-decorators
    - include: footnote
    - include: references
    - include: verbatim
    - include: verb
    - include: url
    - include: graphics
    - include: lists

  plain-tex:
    - include: macros
    - include: scope:text.tex#controls
    - include: scope:text.tex#catcode
    - include: boxes
    - include: block-math
    - include: inline-math
    - include: general-constants

  comments:
    - include: scope:text.tex#comments

  global-braces:
    - match: '\{'
      scope: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.group.brace.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main

  # these are used to identify arguments in commands
  general-optional-arguments:
    - match: '\['
      scope: punctuation.definition.group.bracket.begin.latex
      push:
        - meta_scope: meta.group.bracket.latex
        - match: '\]'
          scope: punctuation.definition.group.bracket.end.latex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: global-braces
        - match: '[A-Za-z[:digit:]-]*(?=\s*\=)'
          scope: variable.parameter.bracket.latex

  argument-brace:
    - meta_scope: meta.group.brace.latex
    - match: '\}'
      scope: punctuation.definition.group.brace.end.latex
      pop: true
    - include: main

  argument:
    - match: '\{'
      scope: punctuation.definition.group.brace.begin.latex
      set: argument-brace
    - match: '(?=\S)'
      pop: true

  optional-arguments:
    - include: general-optional-arguments
    - match: '(?=\S)'
      pop: true

  # used in macros to prevent matching of \begin{env}...\end{env}
  macro-braces:
    - match: '\{'
      scope: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.group.brace.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: macro-braces

  macros:
    - include: scope:text.tex#macros
    - match: |-
        (?x)
        (
          (\\)
          (?:(?:re)?newcommand\*?)
        )
        (?:
          (\{)(\\[A-Za-z@]+)(\})
          | (\\[A-Za-z@])+
        )
        (?:(\[)(?:[^\]]*)(\]))*
        (\{)
      captures:
        1: support.function.newcommand.latex storage.modifier.newcommand.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: support.function.latex entity.name.newcommand.latex
        5: punctuation.definition.group.brace.end.latex
        6: support.function.latex
        7: punctuation.definition.group.bracket.begin.latex
        8: punctuation.definition.group.bracket.end.latex
        9: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.newcommand.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: macro-braces
    - match: |-
        (?x)
        (
          (\\)
          DeclareMathOperator\*?
        )
        (?:
          (\{)(\\[A-Za-z@]+)(\})
          | (\\[A-Za-z@])+
        )
        (?:(\[)(?:[^\]]*)(\]))?
        (\{)
      captures:
        1: support.function.declare-math-operator.latex storage.modifier.declare-math-operator.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: support.function.latex entity.name.declare-math-operator.latex
        5: punctuation.definition.group.brace.end.latex
        6: support.function.latex
        7: punctuation.definition.group.bracket.begin.latex
        8: punctuation.definition.group.bracket.end.latex
        9: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.declare-math-operator.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: macro-braces

  general-constants:
    - match: '(\\\\)(?:(\[)\s*-?((?:[[:digit:]]|\.)*)\s*(\w*)\s*(\]))?'
      captures:
        1: constant.character.newline.latex
        2: punctuation.definition.group.bracket.begin.newline.latex
        3: constant.numeric.newline.latex
        4: keyword.other.newline.latex
        5: punctuation.definition.group.bracket.begin.newline.latex
    - include: scope:text.tex#general-constants

  general-commands:
    - match: '(\\)[A-Za-z@]+'
      scope: support.function.general.latex
      captures:
        1: punctuation.definition.backslash.latex

  boxes:
    - match: '((\\)[hvmf]box)\s*(\{)'
      captures:
        1: support.function.box.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.box.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)(?:framebox|makebox))\b'
      captures:
        1: support.function.box.latex
        2: punctuation.definition.backslash.latex
      push:
        - [{meta_scope: meta.function.box.latex}, {match: '', pop: true}]
        - argument
        - optional-arguments
    - match: '((\\)parbox)\b'
      captures:
        1: support.function.box.latex
        2: punctuation.definition.backslash.latex
      push:
        - [{meta_scope: meta.function.box.latex}, {match: '', pop: true}]
        - argument
        - argument
        - optional-arguments
    - match: '((\\)raisebox)\b'
      captures:
        1: support.function.box.latex
        2: punctuation.definition.backslash.latex
      push:
        - [{meta_scope: meta.function.box.latex}, {match: '', pop: true}]
        - argument
        - optional-arguments

  preamble:
    - match: '(\\)documentclass\b'
      captures:
        0: keyword.control.preamble.latex
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.preamble.documentclass.latex
        - include: general-optional-arguments
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_scope: meta.preamble.documentclass.latex meta.group.brace.latex
            - match: '[A-Za-z[:digit:]-]'
              scope: support.class.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true

    - match: '(\\)usepackage\b'
      captures:
        0: keyword.control.preamble.latex
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.preamble.usepackage.latex
        - include: general-optional-arguments
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_scope: meta.preamble.usepackage.latex meta.group.brace.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
            - match: '[A-Za-z[:digit:]-]*'
              scope: support.class.latex
        - match: ''
          pop: true

  includes:
    - match: '((\\)(?:include|includeonly))(\{)'
      scope: meta.function.include.latex
      captures:
        1: keyword.control.include.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.include.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true

  sections:
    - match: |-
        (?x)
        (
          (\\)
          (?:
            (?:sub){0,2}section
            | (?:sub)?paragraph
            | chapter|part|addpart
            | addchap|addsec|minisec
          )
          (?:\*)?
        )
        (?:
          (\[)([^\[]*?)(\])               # optional Title
        )?
        (\{)
      captures:
        1: support.function.section.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: entity.name.section.latex
        5: punctuation.definition.group.brace.end.latex
        6: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.section.latex
        - meta_content_scope: entity.name.section.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main

  structure:
    - match: ((\\)(?:frontmatter|mainmatter|backmatter|appendix|printindex))\b
      captures:
        1: keyword.control.latex
        2: punctuation.definition.backslash.latex

  verbatim:
    - match: '((\\)begin)(\{)\s*((?:[vV]erbatim|alltt)\*?)\s*(\})'
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_include_prototype: false
        - meta_scope: meta.environment.verbatim.verbatim.latex
        - meta_content_scope: markup.raw.verbatim.latex
        - match: '((\\)end)(\{)\s*(\4)\s*(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.begin.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true

  lists:
    - match: '((\\)begin)(\{)\s*(itemize\*?)\s*(\})'
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_scope: meta.environment.list.itemize.latex
        - match: '((\\)end)(\{)\s*(\4)\s*(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.begin.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)begin)(\{)\s*(enumerate\*?)\s*(\})'
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_scope: meta.environment.list.enumerate.latex
        - match: '((\\)end)(\{)\s*(\4)\s*(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.begin.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)begin)(\{)\s*(list\*?)\s*(\})'
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_scope: meta.environment.list.list.latex
        - match: '((\\)end)(\{)\s*(\4)\s*(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.begin.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)begin)(\{)\s*(description\*?)\s*(\})'
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_scope: meta.environment.list.description.latex
        - match: '((\\)end)(\{)\s*(\4)\s*(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.begin.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main

  math-braces:
    - match: '\{'
      scope: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.group.brace.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: math-content

  math-content:
    # unique to latex
    - include: verb
    - include: text-decorators
    - include: references
    - include: begin-end-commands
    # extended from tex
    - include: scope:text.tex#greeks
    - include: scope:text.tex#math-brackets
    - include: math-braces
    - include: boxes
    - include: scope:text.tex#math-commands
    - include: scope:text.tex#math-operators
    - include: scope:text.tex#math-characters
    - include: scope:text.tex#math-numerics
    - include: general-constants
    - match: (?=\})
      pop: true

  inline-math:
    - match: \$
      scope: string.other.math.latex punctuation.definition.string.begin.latex
      push:
        - meta_scope: meta.environment.math.inline.dollar.latex
        - match: \$
          scope: string.other.math.latex punctuation.definition.string.end.latex
          pop: true
        - include: math-content
    - match: '((\\)ensuremath)(\{)'
      captures:
        1: support.function.ensuremath.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.ensuremath.latex
        - meta_content_scope: meta.environment.math.inline.ensuremath.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: math-content

    - match: (\\\()
      scope: string.other.math.latex
      captures:
        1: punctuation.definition.string.begin.latex
      push:
        - meta_scope: meta.environment.math.inline.paren.latex
        - match: (\\\))
          scope: string.other.math.latex punctuation.definition.string.end.latex
          pop: true
        - include: math-content

  block-math:
    - match: \$\$
      scope: string.other.math.latex punctuation.definition.string.begin.latex
      push:
        - meta_scope: meta.environment.math.block.dollar.latex
        - match: \$\$
          scope: string.other.math.latex punctuation.definition.string.end.latex
          pop: true
        - include: math-content

    - match: '(\\\[)'
      scope: string.other.math.latex punctuation.definition.string.begin.latex
      push:
        - meta_scope: meta.environment.math.block.bracket.latex
        - match: '(\\\])'
          scope: string.other.math.latex punctuation.definition.string.end.latex
          pop: true
        - include: math-content

    - match: |-
        (?x)
        ((\\)begin)(\{)\s*((?:
          align|alignat|aligned|alignedat|displaymath
          |eqnarray|equation|flalign|gather|gathered
          |math|multline|x?xalignat|split
          |dmath|dseries|dgroup|darray|dsuspend
        )\*?)\s*(\})
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_content_scope: meta.environment.math.block.be.latex
        - match: '((\\)end)(\{)\s*(\4)\s*(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.begin.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true
        - include: math-content

  graphics:
    - match: '((\\)includegraphics)\b'
      captures:
        1: support.function.includegraphics.latex
        2: punctuation.definition.backslash.latex
      push:
        - [{meta_scope: meta.function.includegraphics.latex}, {match: '', pop: true}]
        - argument
        - optional-arguments

  url:
    - match: '((\\)(?:url|href|path))(\{)([^}]*)(\})'
      scope: meta.function.link.url.latex
      captures:
        1: support.function.url.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: markup.underline.link.latex
        5: punctuation.definition.group.brace.end.latex

  verb:
    - match: ((\\)verb)(\W)
      captures:
        1: support.function.verb.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.verb.latex
      push:
        - meta_include_prototype: false
        - meta_scope: meta.environment.verbatim.verb.latex
        - meta_content_scope: markup.raw.verb.latex
        - match: '\3'
          scope: punctuation.definition.verb.latex
          pop: true


  text-decorators:
    - match: '((\\)emph)(\{)'
      captures:
        1: support.function.emph.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.emph.latex
        - meta_content_scope: markup.italic.emph.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)textit)(\{)'
      captures:
        1: support.function.textit.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.textit.latex
        - meta_content_scope: markup.italic.textit.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)textbf)(\{)'
      captures:
        1: support.function.textbf.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.textbf.latex
        - meta_content_scope: markup.bold.textbf.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)texttt)(\{)'
      captures:
        1: support.function.texttt.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.texttt.latex
        - meta_content_scope: markup.raw.texttt.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)textsl)(\{)'
      captures:
        1: support.function.textsl.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.textsl.latex
        - meta_content_scope: markup.italic.textsl.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)text)(\{)'
      captures:
        1: support.function.text.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main
    - match: '((\\)underline)(\{)'
      captures:
        1: support.function.text.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.underline.latex
        - meta_content_scope: markup.underline.underline.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: main

  footnote:
    - match: ((\\)footnote(?:text)?)\b
      captures:
        1: support.function.footnote.latex
        2: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.function.footnote.latex
        - include: general-optional-arguments
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_scope: meta.function.footnote.latex meta.group.brace.latex
            - meta_content_scope: markup.italic.footnote.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
            - include: main
        - match: '(?=\S)'
          pop: true
    - match: |-
        (?x)
        ((\\)footnotemark)\b
      captures:
        1: support.function.footnote.latex
        2: punctuation.definition.backslash.latex
      push: optional-arguments

  references:
    - match: |-
        (?x)
        (\\)
        (?:
          # biblatex commands
          #   http://mirrors.ibiblio.org/CTAN/macros/latex/exptl/biblatex/doc/biblatex.pdf section 3.8
          # commands with multicite variant
            (?:[aA]uto|foot|[pP]aren|[sS]mart|super|[tT]ext)cites?
          | [Cc]ites?
          | footcitetexts?
          # text commands
          | [cC]ite(?:author)
          | cite(?:title|year|date)
          | citeurl
          # special
          | (?:[aA]|no|full|footfull)cites?
          | [vV]olcites?
          | (?:[pPfFsStTaA]|ft)volcites?
          | (?:[pPf]?n|N)otecite
          # non-biblatex
          | [aA]cite
          | [cC]ite(?:t|p|alt|alp|text|yearpar)
        )\b
        # For simplicity with using \b, we match a star for all variants
        \*?
      scope: support.function.cite.latex keyword.other.cite.latex
      captures:
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.function.citation.latex
        - include: general-optional-arguments
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          # Some commands, e.g. \parencites, allow multiple [][]{} argument sequences,
          # so we `push` instead of `set`.
          push:
            - meta_scope: meta.group.brace.latex
            - match: '[a-zA-Z0-9\.:/*!^_-]+'
              scope: constant.other.citation.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
    - match: |-
        (?x)
        (
          (\\)
          (?:eq|c?page|[vV]|auto|name|[cC])?ref
          \*?
        )\b
      captures:
        1: support.function.reference.latex keyword.other.reference.latex
        2: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.function.reference.latex
        - include: general-optional-arguments
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_scope: meta.function.reference.latex meta.group.brace.latex
            - match: '[a-zA-Z0-9\.:/*!^_-]+'
              scope: constant.other.reference.latex
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              pop: true
        - match: ''
          pop: true
    - match: '((\\)label)(\{)'
      captures:
        1: support.function.label.latex storage.type.label.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.label.latex
        - match: '[a-zA-Z0-9\.:/*!^_-]+'
          scope: entity.name.label.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true

  begin-end-commands:
    - match: '((\\)begin)(\{)\s*(\w*)\*?\s*(\})'
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - include: general-optional-arguments
        - match: ''
          pop: true
    - match: '((\\)end)(\{)\s*(\w*)\*?\s*(\})'
      captures:
        1: support.function.end.latex keyword.control.flow.end.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex

  # external packages
  packages:
    - include: pkglistings
    - include: minted
    - include: pkgcomment
    - include: beamer
    - include: pkgarray

  # listings package
  pkglistings:
    - match: (\\)lstinline\b
      captures:
        0: support.function.lstinline.latex
        1: punctuation.definition.backslash.latex
      push:
        - meta_include_prototype: false
        - meta_scope: meta.environment.verbatim.lstinline.latex
        - include: general-optional-arguments
        - match: '\{'
          scope: punctuation.definition.group.brace.begin.latex
          set:
            - meta_include_prototype: false
            - meta_scope: meta.group.brace.latex
            - meta_content_scope: meta.environment.verbatim.lstinline.latex markup.raw.verb.latex
            - match: '\}'
              scope: meta.environment.verbatim.lstinline.latex punctuation.definition.group.brace.end.latex
              pop: true
        - match: '(\W)'
          scope: punctuation.definition.verb.latex
          set:
            - meta_include_prototype: false
            - meta_content_scope: meta.environment.verbatim.lstinline.latex markup.raw.verb.latex
            - match: '\1'
              scope: meta.environment.verbatim.lstinline.latex punctuation.definition.verb.latex
              pop: true

    - match: ((\\)begin)(\{)(lstlisting)(\})
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_include_prototype: false
        - meta_scope: meta.environment.verbatim.lstlisting.latex
        - match: '((\\)end)(\{)(lstlisting)(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.end.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-optional-arguments
        - match: '.*(%\s*(?i:c))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.c
          embed_scope: meta.environment.embedded.c.latex source.c.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:cpp|c\+\+))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.c++
          embed_scope: meta.environment.embedded.c++.latex source.c++.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:haskell|hs))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.haskell
          embed_scope: meta.environment.embedded.haskell.latex source.haskell.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:java))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.java
          embed_scope: meta.environment.embedded.java.latex source.java.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:html))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:text.html.basic
          embed_scope: meta.environment.embedded.html.latex source.html.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:tex|latex))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:text.tex.latex
          embed_scope: meta.environment.embedded.latex.latex source.latex.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:lisp))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.lisp
          embed_scope: meta.environment.embedded.lisp.latex source.lisp.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:lua))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.lua
          embed_scope: meta.environment.embedded.lua.latex source.lua.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:perl))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.perl
          embed_scope: meta.environment.embedded.perl.latex source.perl.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:php))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.php
          embed_scope: meta.environment.embedded.php.latex source.php.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:python|py))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.python
          embed_scope: meta.environment.embedded.python.latex source.python.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:r))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.r
          embed_scope: meta.environment.embedded.r.latex source.r.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:ruby))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.ruby
          embed_scope: meta.environment.embedded.ruby.latex source.ruby.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:sh|shell|bash ))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.shell
          embed_scope: meta.environment.embedded.shell.latex source.shell.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:sql|mysql|ddl|dml))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.sql
          embed_scope: meta.environment.embedded.sql.latex source.sql.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:xml))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:text.xml
          embed_scope: meta.environment.embedded.xml.latex source.xml.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: '.*(%\s*(?i:yaml))$'
          captures:
            1: comment.line.percentage.latex
          embed: scope:source.yaml
          embed_scope: meta.environment.embedded.yaml.latex source.yaml.embedded
          escape: '(?=\\end\{lstlisting\})'
        - match: ''
          push:
            - meta_scope: meta.environment.embedded.generic.latex markup.raw.verb.latex
            - match: '(?=\\end\{lstlisting\})'
              pop: true

  minted:
    - include: minted-env
    - include: mint

  minted-env:
    - match: ((\\)begin)(\{)(minted)(\})
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_include_prototype: false
        - meta_scope: meta.environment.verbatim.minted.latex
        - match: '((\\)end)(\{)(minted)(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.end.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-optional-arguments
        - match: '(\{)(c)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.c
          embed_scope: meta.environment.embedded.c.latex source.c.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(cpp|c\+\+)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.c++
          embed_scope: meta.environment.embedded.c++.latex source.c++.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(diff)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.diff
          embed_scope: meta.environment.embedded.diff.latex source.diff.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(go|golang)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.go
          embed_scope: meta.environment.embedded.go.latex source.go.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(haskell|hs)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.haskell
          embed_scope: meta.environment.embedded.haskell.latex source.haskell.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(html)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:text.html.basic
          embed_scope: meta.environment.embedded.html.latex text.html.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(java)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.java
          embed_scope: meta.environment.embedded.java.latex source.java.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(javascript|js)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.js
          embed_scope: meta.environment.embedded.js.latex source.js.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(json)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.json
          embed_scope: meta.environment.embedded.json.latex source.json.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(tex|latex)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:text.tex.latex
          embed_scope: meta.environment.embedded.latex.latex text.tex.latex.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(lisp)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.lisp
          embed_scope: meta.environment.embedded.lisp.latex source.lisp.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(lua)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.lua
          embed_scope: meta.environment.embedded.lua.latex source.lua.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(obj(?:ective\-|)c)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.objc
          embed_scope: meta.environment.embedded.objc.latex source.objc.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(obj(?:ective\-|)c\+\+)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.objc++
          embed_scope: meta.environment.embedded.objc++.latex source.objc++.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(perl)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.perl
          embed_scope: meta.environment.embedded.perl.latex source.perl.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(php)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.php
          embed_scope: meta.environment.embedded.php.latex source.php.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(python|py)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.python
          embed_scope: meta.environment.embedded.python.latex source.python.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(r)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.r
          embed_scope: meta.environment.embedded.r.latex source.r.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(ruby)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.ruby
          embed_scope: meta.environment.embedded.ruby.latex source.ruby.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(sh|shell|bash )(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.shell
          embed_scope: meta.environment.embedded.shell.latex source.shell.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(sql|mysql|ddl|dml)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.sql
          embed_scope: meta.environment.embedded.sql.latex source.sql.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(xml)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:text.xml
          embed_scope: meta.environment.embedded.xml.latex text.xml.embedded
          escape: '(?=\\end\{minted\})'
        - match: '(\{)(yaml)(\})'
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
          embed: scope:source.yaml
          embed_scope: meta.environment.embedded.yaml.latex source.yaml.embedded
          escape: '(?=\\end\{minted\})'
        - match: ''
          push:
            - meta_scope: meta.environment.embedded.generic.latex markup.raw.verb.latex
            - match: '(?=\\end\{minted\})'
              pop: true

  mint:
    - match: ((\\)mint)\b|((\\)mintinline)\b
      captures:
        1: support.function.mint.latex
        2: punctuation.definition.backslash.latex
        3: support.function.mintinline.latex
        4: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.environment.verbatim.minted.latex
        - include: general-optional-arguments
        - match: '(\{)(c)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.c
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.c.latex source.c.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(cpp|c\+\+)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.c++
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.c++.latex source.c++.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(diff)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.diff
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.diff.latex source.diff.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(go|golang)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.go
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.go.latex source.go.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(haskell|hs)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.haskell
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.haskell.latex source.haskell.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(html)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:text.html.basic
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.html.latex text.html.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(java)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.java
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.java.latex source.java.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(javascript|js)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.js
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.js.latex source.js.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(json)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.json
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.json.latex source.json.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(tex|latex)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:text.tex.latex
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.latex.latex text.tex.latex.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(lisp)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.lisp
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.lisp.latex source.lisp.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(lua)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.lua
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.lua.latex source.lua.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(obj(?:ective\-|)c)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.objc
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.objc.latex source.objc.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(obj(?:ective\-|)c\+\+)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.objc++
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.objc++.latex source.objc++.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(perl)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.perl
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.perl.latex source.perl.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(php)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.php
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.php.latex source.php.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(python|py)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.python
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.python.latex source.python.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(r)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.r
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.r.latex source.r.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(ruby)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.ruby
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.ruby.latex source.ruby.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(sh|shell|bash )(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.shell
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.shell.latex source.shell.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(sql|mysql|ddl|dml)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.sql
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.sql.latex source.sql.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(xml)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:text.xml
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.xml.latex text.xml.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: '(\{)(yaml)(\})((\{)|(\W))'
          scope: meta.environment.verbatim.minted.latex
          captures:
            1: punctuation.definition.group.brace.begin.latex
            2: variable.parameter.function.latex
            3: punctuation.definition.group.brace.end.latex
            5: punctuation.definition.group.brace.begin.latex
            6: punctuation.definition.verb.latex
          embed: scope:source.yaml
          embed_scope: meta.environment.verbatim.minted.latex meta.environment.embedded.yaml.latex source.yaml.embedded
          escape: '(\})|(\4)'
          escape_captures:
            1: punctuation.definition.group.brace.begin.latex
            2: punctuation.definition.verb.latex
        - match: ''
          pop: true

  # comment package
  pkgcomment:
    - match: '^(\\)comment\b'
      captures:
        0: punctuation.definition.comment.start.latex
        1: punctuation.definition.backslash.latex
      push:
        - meta_scope: meta.environment.comment.latex comment.block.command.comment.latex
        - match: '^(\\)endcomment\b'
          captures:
            0: punctuation.definition.comment.end.latex
            1: punctuation.definition.backslash.latex
          pop: true
    - match: '((\\)begin)(\{)\s*(comment)\s*(\})'
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_scope: meta.environment.comment.latex
        - meta_content_scope: comment.block.environment.comment.latex
        - match: '((\\)end)(\{)\s*(comment)\s*(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.end.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true

  # beamer support
  beamer:
    - match: '((\\)begin)(\{)(frame)(\})'
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
      push:
        - meta_scope: meta.environment.frame.latex
        - match: '((\\)end)(\{)(frame)(\})'
          captures:
            1: support.function.end.latex keyword.control.flow.end.latex
            2: punctuation.definition.backslash.latex
            3: punctuation.definition.group.brace.begin.latex
            4: variable.parameter.function.latex
            5: punctuation.definition.group.brace.end.latex
          pop: true
        - include: frametitles
        - include: main

  frametitles:
    - match: '((\\)frametitle)(\{)(.*)(\})'
      scope: meta.function.frametitle.latex
      captures:
       1: support.function.frametitle.latex
       2: punctuation.definition.backslash.latex
       3: punctuation.definition.group.brace.begin.latex
       4: entity.name.function.frame.latex
       5: punctuation.definition.group.brace.end.latex

  # support for array package
  pkgarray:
    - match: |-
        (?x)
        (
          (\\)newcolumntype
        )
        (?:
          (\{)
          (
            (?:\\[A-Za-z@]+)
            | (?:[A-Za-z@])
          )
          (\})
        )
        (?:(\[)(?:[^\]]*)(\]))*
        (\{)
      captures:
        1: support.function.newcolumntype.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: support.function.latex entity.name.newcolumntype.latex
        5: punctuation.definition.group.brace.end.latex
        6: punctuation.definition.group.bracket.begin.latex
        7: punctuation.definition.group.bracket.end.latex
        8: punctuation.definition.group.brace.begin.latex
      push:
        - meta_include_prototype: false
        - meta_scope: meta.function.newcolumntype.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: array-preamble


    - match: |-
        (?x)
        ((\\)begin)(\{)(tabular)(\})
        (?:(\[)(?:b|c|t)(\]))?
        (?=\s*\{)
      captures:
        1: support.function.begin.latex keyword.control.flow.begin.latex
        2: punctuation.definition.backslash.latex
        3: punctuation.definition.group.brace.begin.latex
        4: variable.parameter.function.latex
        5: punctuation.definition.group.brace.end.latex
        6: punctuation.definition.group.bracket.begin.latex
        7: punctuation.definition.group.bracket.end.latex
      push:
        - meta_scope: meta.environment.tabular.latex
        - match: '\{'
          scope: meta.function.column-spec.latex punctuation.definition.group.brace.begin.latex
          set:
            - meta_content_scope: meta.environment.tabular.latex meta.function.column-spec.latex
            - include: array-preamble
            - match: '\}'
              scope: punctuation.definition.group.brace.end.latex
              set:
                - meta_content_scope: meta.environment.tabular.latex
                - match: '((\\)end)(\{)(tabular)(\})'
                  scope: meta.environment.tabular.latex
                  captures:
                    1: support.function.end.latex keyword.control.flow.end.latex
                    2: punctuation.definition.backslash.latex
                    3: punctuation.definition.group.brace.begin.latex
                    4: variable.parameter.function.latex
                    5: punctuation.definition.group.brace.end.latex
                  pop: true
                - include: main


  array-preamble:
    - match: '\{'
      scope: punctuation.definition.group.brace.begin.latex
      push:
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: array-preamble

    - match: 'l|r|c'
      scope: keyword.other.column-type.latex

    - match: '(?:p|m|b)(?=\s*\{)'
      scope: support.function.parbox-column.latex
      push:
        - [{meta_scope: meta.function.parbox-column.latex}, {match: '', pop: true}]
        - argument

    - match: '(>)\s*(\{)'
      captures:
        1: support.function.insert-before-column.latex
        2: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.before-column-decl.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: macro-braces

    - match: '(<)\s*(\{)'
      captures:
        1: support.function.insert-after-column.latex
        2: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.after-column-decl.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: macro-braces

    - match: '\|'
      scope: keyword.operator.inter-column-line.latex

    - match: '(@)\s*(\{)'
      captures:
        1: support.function.inter-column-nospace.latex
        2: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.inter-column-decl.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: macro-braces

    - match: '(!)\s*(\{)'
      captures:
        1: support.function.inter-column.latex
        2: punctuation.definition.group.brace.begin.latex
      push:
        - meta_scope: meta.function.inter-column-decl.latex
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: macro-braces

    - match: '(\*)\s*(\{)'
      captures:
        1: support.function.insert-repeated.latex
        2: meta.function.insert-repeated-count.latex punctuation.definition.group.brace.begin.latex
      push:
        - meta_content_scope: meta.function.insert-repeated-count.latex
        - match: '\d+'
          scope: constant.numeric.array-count.latex
        - include: general-commands
        - match: '\}'
          scope: punctuation.definition.group.brace.end.latex
          set:
            - match: '\{'
              scope: meta.function.insert-repeated-content.latex punctuation.definition.group.brace.begin.latex
              set:
                - meta_content_scope: meta.function.insert-repeated-content.latex
                - include: array-preamble
                - match: '\}'
                  scope: meta.function.insert-repeated-content.latex punctuation.definition.group.brace.end.latex
                  pop: true
            - match: ''
              pop: true

  frontmatter:
    - match: (---)\s*(?i:(json)\s*)\n
      captures:
        0: meta.frontmatter.markdown
        1: punctuation.section.block.begin.frontmatter.markdown
        2: constant.other.language-name.markdown
      embed: scope:source.json
      embed_scope: meta.frontmatter.markdown source.json.embedded.markdown
      escape: ^(---|\.{3})\s*\n # pandoc requires the remainder of the line to be blank
      escape_captures:
        0: meta.frontmatter.markdown
        1: punctuation.section.block.end.frontmatter.markdown
    - match: (---)\s*(?i:(yaml)\s*)?\n
      captures:
        0: meta.frontmatter.markdown
        1: punctuation.section.block.begin.frontmatter.markdown
        2: constant.other.language-name.markdown
      embed: scope:source.yaml
      embed_scope: meta.frontmatter.markdown source.yaml.embedded.markdown
      escape: ^(---|\.{3})\s*\n  # pandoc requires the remainder of the line to be blank
      escape_captures:
        0: meta.frontmatter.markdown
        1: punctuation.section.block.end.frontmatter.markdown

  markdown:
    - match: |-
        (?x)^
        (?=  {{block_quote}}
        |    {{indented_code_block}}(?!$)
        |    {{atx_heading}}
        |    {{thematic_break}}
        |    {{table_first_row}}
        )
      comment: |
        We could also use an empty end match and set
                        applyEndPatternLast, but then we must be sure that the begin
                        pattern will only match stuff matched by the sub-patterns.
      push:
        - meta_scope: meta.block-level.markdown
        - include: block-quotes
        - include: ligatures
        - include: indented-code-block
        - include: atx-heading
        - include: thematic-break
        - include: table
        - match: ''
          pop: true
    - match: ^([ ]{0,3})([*+-])( (\[[ xX]\]))?(?=\s)
      captures:
        1: markup.list.unnumbered.markdown
        2: markup.list.unnumbered.bullet.markdown punctuation.definition.list_item.markdown
        3: markup.list.unnumbered.markdown
        4: constant.language.checkbox.markdown-gfm
      push:
        - meta_content_scope: markup.list.unnumbered.markdown
        - match: ^(?=\S)
          pop: true
        - include: list-paragraph
    - match: ^([ ]{0,3})(\d+([.)]))(?=\s)
      captures:
        1: markup.list.numbered.markdown
        2: markup.list.numbered.bullet.markdown
        3: punctuation.definition.list_item.markdown
      push:
        - meta_content_scope: markup.list.numbered.markdown
        - match: ^(?=\S)
          pop: true
        - include: list-paragraph
    - match: '^[ ]{0,3}(?=<((?i:pre))\b)'
      comment: Markdown formatting is disabled inside block-level tags.
      push: [disabled-markdown-pop-at-eol, disable-markdown-pop-at-tag]
    - match: '^[ ]{0,3}(?=<{{html_tag_block_end_at_close_tag}})'
      comment: Markdown formatting is disabled inside block-level tags.
      push: [disabled-markdown-pop-at-eol, disable-markdown-pop-after-tag]
    - match: '^[ ]{0,3}(?=<\?)'
      comment: Markdown formatting is disabled inside preprocessor instructions.
      push: [disabled-markdown-pop-at-eol, disable-markdown-pop-at-php]
    - match: '^[ ]{0,3}(?=<!(?:[A-Z]|--))'
      comment: Markdown formatting is disabled inside doctype declarations and comments.
      push: [disabled-markdown-pop-at-eol, disable-markdown-pop-after-html-doctype]
    - match: '^[ ]{0,3}(?=<!\[CDATA\[)'
      comment: Markdown formatting is disabled inside CDATA.
      push: [disabled-markdown-pop-at-eol, disable-markdown-pop-after-cdata]
    - match: '^[ ]{0,3}(?=(?:{{html_tag_open_commonmark}}|{{html_tag_close_commonmark}})\s*$|<{{html_tag_block_end_at_blank_line}})'
      comment: Markdown formatting is disabled inside block level tags and if a complete HTML tag is the only thing on the line.
      push: [disabled-markdown-pop-at-eol, disable-markdown-pop-at-blank-line]
    - match: |-
        (?x:
            \s*                        # Leading whitespace
            (\[)(\^[^]]*)(\])(:)       # Reference name
            [ \t]*                     # Optional whitespace
        )
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: entity.name.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
        4: punctuation.separator.key-value.markdown
      push:
        - meta_scope: meta.link.reference.def.footnote.markdown-extra
        - match: ^(?![ ]{4}|$)
          pop: true
        - include: inline-bold-italic
    - include: reference-link-definition
    - include: fenced-code-blocks
    - include: setext-heading-or-paragraph

  setext-heading-or-paragraph:
    # A paragraph may start with a line of equal signs which must not be matched
    # as heading underline. This is achieved by consuming them here, which also
    # applies `meta.paragraph` scope as expected.
    # A line of dashes is already matched as thematic break and thus ignored.
    - match: ^[ ]{,3}(?:=+|(?=\S))
      branch_point: setext-heading-or-paragraph
      branch:
        - paragraph
        - setext-heading2
        - setext-heading1

  setext-heading1:
    # https://spec.commonmark.org/0.30/#setext-headings
    - meta_scope: markup.heading.1.markdown
    - meta_content_scope: entity.name.section.markdown
    - match: ^[ ]{,3}(=+)[ \t]*$(\n?)
      captures:
        1: punctuation.definition.heading.setext.markdown
        2: meta.whitespace.newline.markdown
      pop: true
    - include: setext-heading-content

  setext-heading2:
    # https://spec.commonmark.org/0.30/#setext-headings
    - meta_scope: markup.heading.2.markdown
    - meta_content_scope: entity.name.section.markdown
    - match: ^[ ]{,3}(-+)[ \t]*$(\n?)
      captures:
        1: punctuation.definition.heading.setext.markdown
        2: meta.whitespace.newline.markdown
      pop: true
    - include: setext-heading-content

  setext-heading-content:
    - match: '{{setext_escape}}'
      fail: setext-heading-or-paragraph
    - include: inline-bold-italic
    - include: scope:text.html.basic

  paragraph:
    # https://spec.commonmark.org/0.30/#paragraphs
    - meta_scope: meta.paragraph.markdown
    - match: '{{setext_escape}}'
      fail: setext-heading-or-paragraph
    - include: paragraph-end
    - include: inline-bold-italic-linebreak
    - include: scope:text.html.basic

  paragraph-end:
    - match: |-
        (?x)                            # pop out of this context if one of the following conditions are met:
        ^(?=
          \s*$                          # the line is blank (or only contains whitespace)
          | {{atx_heading}}             # an ATX heading begins the line
          | {{block_quote}}             # a blockquote begins the line
          | {{fenced_code_block_start}} # a fenced codeblock begins the line
          | {{thematic_break}}          # line is a thematic beak
          | [ ]{,3}1[.)]\s              # an ordered list item with number "1" begins the line
          | [ ]{,3}[*+-]\s              # an unordered list item begins the line
          | [ ]{,3}<(?:                 # all types of HTML blocks except type 7 may interrupt a paragraph
              {{html_tag_block_end_at_close_tag}}   # 1
            | !--                                   # 2
            | \?                                    # 3
            | ![A-Z]                                # 4
            | !\[CDATA\[                            # 5
            | {{html_tag_block_end_at_blank_line}}  # 6
          ) )
      pop: true

  ampersand:
    - match: (?!{{html_entity}})&
      comment: |
        Markdown will convert this for us. We match it so that the
                        HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-ampersand.markdown

  ligatures:
    - match: '<?(-+|=+)<'     # -< --< ---< ----< <-< <--< <---< <----<
                              # =< ==< ===< ====< <=< <==< <===< <====<
    - match: '<(-+|=+)>?'     # <- <-- <--- <-> <--> <--->
                              # <= <== <=== <=> <==> <===>
    - match: '>(-+|=+)[<>]?'  # >- >-- >--- >-> >--> >---> >-< >--< >---<
                              # >= >== >=== >=> >==> >===> >=< >==< >===<
    - match: '<<+|<>|>>+'     # << <<< <<<< <> >>>> >>> >>

  block-quotes:
    # https://spec.commonmark.org/0.30/#block-quotes
    - match: ^{{block_quote}}
      comment: |-
        We terminate the block quote when seeing an empty line, a
        separator or a line with leading > characters. The latter is
        to “reset” the quote level for quoted lines.
        The idea here is to match block level elements first, then once
        we have confirmed there are no block level elements left, move to
        matching inline markdown. This prevents block level elements being
        detected when they shouldn't be.
      captures:
        1: punctuation.definition.blockquote.markdown
      push:
        - block-quote-meta
        - block-quote-content

  block-quote-nested:
    - match: '{{block_quote}}'
      captures:
        1: punctuation.definition.blockquote.markdown
      set:
        - block-quote-meta
        - block-quote-content

  block-quote-meta:
    - meta_include_prototype: false
    - meta_scope: markup.quote.markdown
    - include: immediately-pop

  block-quote-content:
    - include: block-quote-nested
    - include: block-quote-code-block
    - include: block-quote-list-item
    - include: atx-heading
    - include: indented-code-block
    - include: thematic-break
    - match: ''
      set: block-quote-text

  block-quote-code-block:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          {{fenced_code_block_language}}?
          .*$\n?       # all characters until EOL
      captures:
        0: meta.code-fence.definition.begin.text.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      set: block-quote-code-block-content

  block-quote-code-block-content:
    - match: ^(?!\s*{{block_quote}})
      pop: true
    - match: '{{code_fence_end}}'
      captures:
        0: meta.code-fence.definition.end.text.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown
      pop: true
    - match: '{{block_quote}}'
      captures:
        1: punctuation.definition.blockquote.markdown
    - match: ''
      push: block-quote-code-block-text

  block-quote-code-block-text:
    - meta_include_prototype: false
    - meta_content_scope: markup.raw.code-fence.markdown-gfm
    - match: ^
      pop: true

  block-quote-list-item:
    - match: ([ ]{,3})(\d+)(\.)(\s)
      captures:
        1: markup.list.numbered.markdown
        2: markup.list.numbered.bullet.markdown
        3: markup.list.numbered.bullet.markdown punctuation.definition.list_item.markdown
        4: markup.list.numbered.markdown
      set:
        - block-quote-ordered-list-content
        - list-content
    - match: ([ ]{,3})([*+-])((?:[ ](\[[ xX]\]))?\s)
      captures:
        1: markup.list.unnumbered.markdown
        2: markup.list.unnumbered.bullet.markdown punctuation.definition.list_item.markdown
        3: markup.list.unnumbered.markdown
        4: constant.language.checkbox.markdown-gfm
      set:
        - block-quote-unordered-list-content
        - list-content

  block-quote-ordered-list-content:
    - meta_content_scope: markup.list.numbered.markdown meta.paragraph.list.markdown
    - include: block-quote-text

  block-quote-unordered-list-content:
    - meta_content_scope: markup.list.unnumbered.markdown meta.paragraph.list.markdown
    - include: block-quote-text

  block-quote-text:
    - match: |-
        (?x)
        ^
        (?= \s*$
        |   {{atx_heading}}
        |   {{block_quote}}
        |   {{fenced_code_block_start}}
        |   {{list_item}}
        |   {{thematic_break}}
        )
      pop: true
    - include: inline-bold-italic-linebreak
    - include: scope:text.html.basic

  indented-code-block:
    - match: '{{indented_code_block}}.*$\n?'
      scope: markup.raw.block.markdown
  bold:
    - include: ligatures
    - match: '(\*\*)(\*)(?=\S)(?!\*)'
      captures:
        1: punctuation.definition.bold.begin.markdown
        2: markup.italic.markdown punctuation.definition.italic.begin.markdown
      push:
        - meta_scope: markup.bold.markdown
        - meta_content_scope: markup.italic.markdown
        - match: |-
            (?x)
                [ \t]*\*{4,}    # if there are more than 3 its not applicable to be bold or italic
            |   [ \t]+\*(?!\*)  # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
            |   ^\*(?!\*)       # emphasis can't be closed at the start of the line
        - match: (\*)(\*\*)
          captures:
            1: markup.italic.markdown punctuation.definition.italic.end.markdown
            2: punctuation.definition.bold.end.markdown
          pop: true
        - match: \*\*
          scope: punctuation.definition.bold.end.markdown
          set:
            - meta_content_scope: markup.italic.markdown
            - match: |-
                (?x)
                    [ \t]*\*{3,}    # if there are more than 3 its not applicable to be bold or italic
                |   [ \t]+\*\*+     # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
                |   ^\*\*           # emphasis can't be closed at the start of the line
            - match: \*
              scope: markup.italic.markdown punctuation.definition.italic.end.markdown
              pop: true
            - include: format-common
            - include: bold
            - include: strikethrough
        - match: \*
          scope: punctuation.definition.italic.end.markdown
          set:
            - meta_content_scope: markup.bold.markdown
            - match: |-
                (?x)
                    [ \t]*\*{3,}    # if there are more than 3 its not applicable to be bold or italic
                |   [ \t]+\*\*+     # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
                |   ^\*\*           # emphasis can't be closed at the start of the line
            - match: \*\*
              scope: markup.bold.markdown punctuation.definition.bold.end.markdown
              pop: true
            - include: format-common
            - include: italic
            - include: strikethrough
        - include: format-common
        - include: strikethrough
    - match: '\*\*(?=\S)(?!\*\*|\*\s)'
      scope: punctuation.definition.bold.begin.markdown
      push:
        - meta_scope: markup.bold.markdown
        - match: |-
            (?x)
                [ \t]*\*{4,}     # if there are more than 3 its not applicable to be bold or italic
            |   [ \t]+\*\*+      # whitespace followed by 2 or more is also not applicable
            |   ^\*\*            # emphasis can't be closed at the start of the line
        - match: (?:_)?(\*\*)
          captures:
            1: punctuation.definition.bold.end.markdown
          pop: true
        # Consume the underscore that has no corresponding underscore before the closing bold
        # punctuation on the same line, as it won't be treated as italic by CommonMark
        - match: \b_(?=[^\s_])(?=[^*_]*\*\*)
        - include: format-common
        - include: italic
        - include: strikethrough
    - match: '\b(__)(_)(?=\S)(?!_)'
      captures:
        1: punctuation.definition.bold.begin.markdown
        2: markup.italic.markdown punctuation.definition.italic.begin.markdown
      push:
        - meta_scope: markup.bold.markdown
        - meta_content_scope: markup.italic.markdown
        - match: |-
            (?x)
                [ \t]*_{4,}   # if there are more than 3 its not applicable to be bold or italic
            |   [ \t]+_(?!_)  # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
            |   ^_(?!_)       # emphasis can't be closed at the start of the line
        - match: (_)(__)\b
          captures:
            1: markup.italic.markdown punctuation.definition.italic.end.markdown
            2: punctuation.definition.bold.end.markdown
          pop: true
        - match: _\b
          scope: punctuation.definition.italic.end.markdown
          set:
            - meta_content_scope: markup.bold.markdown
            - match: |-
                  (?x)
                      [ \t]*_{3,}   # if there are more than 3 its not applicable to be bold or italic
                  |   [ \t]+__+     # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
                  |   ^__           # emphasis can't be closed at the start of the line
            - match: __\b
              scope: markup.bold.markdown punctuation.definition.bold.end.markdown
              pop: true
            - include: format-common
            - include: italic
            - include: strikethrough
        - match: __\b
          scope: punctuation.definition.bold.end.markdown
          set:
            - meta_content_scope: markup.italic.markdown
            - match: |-
                  (?x)
                      [ \t]*_{3,}   # if there are more than 3 its not applicable to be bold or italic
                  |   [ \t]+__+     # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
                  |   ^__           # emphasis can't be closed at the start of the line
            - match: _\b
              scope: markup.italic.markdown punctuation.definition.italic.end.markdown
              pop: true
            - include: format-common
            - include: bold
            - include: strikethrough
        - include: format-common
        - include: strikethrough
    - match: '\b__(?=\S)(?!_[_\s])'
      scope: punctuation.definition.bold.begin.markdown
      push:
        - meta_scope: markup.bold.markdown
        - match: |-
              (?x)
                  [ \t]*_{4,}    # if there are more than 3 its not applicable to be bold or italic
              |   [ \t]+__+      # whitespace followed by 2 or more is also not applicable
              |   ^__            # emphasis can't be closed at the start of the line
        - match: (?:\*)?(__\b)
          captures:
            1: punctuation.definition.bold.end.markdown
          pop: true
        # Consume the asterisk that has no corresponding asterisk before the closing bold
        # punctuation on the same line, as it won't be treated as italic by CommonMark
        - match: \*(?=[^\s*])(?=[^*_]*__\b)
        - include: format-common
        - include: italic
        - include: strikethrough
  bracket:
    - match: '<(?![A-Za-z/?!$])'
      comment: |
        Markdown will convert this for us. We match it so that the
                        HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-bracket.markdown
  escape:
    - match: '{{escape}}'
      scope: constant.character.escape.markdown

  atx-heading:
    # https://spec.commonmark.org/0.30/#atx-headings
    # Note:
    #   Consume spaces and tabs after opening hashes so entity.name
    #   starts with first non-whitespace character,
    #   but don't do so if directly followed by closing hashes
    #   as terminator pattern requires them to match then.
    - match: '[ ]{,3}(#{1}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading1-content
    - match: '[ ]{,3}(#{2}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading2-content
    - match: '[ ]{,3}(#{3}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading3-content
    - match: '[ ]{,3}(#{4}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading4-content
    - match: '[ ]{,3}(#{5}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading5-content
    - match: '[ ]{,3}(#{6}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading6-content

  atx-heading1-content:
    - meta_scope: markup.heading.1.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading2-content:
    - meta_scope: markup.heading.2.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading3-content:
    - meta_scope: markup.heading.3.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading4-content:
    - meta_scope: markup.heading.4.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading5-content:
    - meta_scope: markup.heading.5.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading6-content:
    - meta_scope: markup.heading.6.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading-content:
    - match: '{{atx_heading_end}}'
      captures:
        1: punctuation.definition.heading.end.markdown
        2: meta.whitespace.newline.markdown
      pop: true
    - include: inline-bold-italic

  image-inline:
    - match: |-
        (?x:
            (\!\[)                             # Images start with ![
            (?=   {{balance_square_brackets}}? # balanced square brackets, backticks, taking into account escapes etc.
                  \]                           # Closing square bracket
                  \(                           # Open paren
            )
         )
      captures:
        1: meta.image.inline.markdown punctuation.definition.image.begin.markdown
      push: [image-inline-attr, image-inline-after-text, image-link-text]

  image-link-text:
    - meta_content_scope: meta.image.inline.description.markdown
    - include: link-text
    - match: \]
      scope: meta.image.inline.markdown punctuation.definition.image.end.markdown
      pop: true

  image-inline-after-text:
    - match: \(
      scope: punctuation.definition.metadata.begin.markdown
      set:
        - meta_scope: meta.image.inline.markdown
        - match: \)
          scope: punctuation.definition.metadata.end.markdown
          pop: true
        - match: <(?=[^>)]*>)
          scope: punctuation.definition.link.begin.markdown
          push:
            - meta_content_scope: markup.underline.link.image.markdown
            - match: \>
              scope: punctuation.definition.link.end.markdown
              set: link-title
            - match: \s+
              scope: invalid.illegal.unexpected-whitespace.markdown
        - match: (?=\S)
          set:
            - meta_scope: meta.image.inline.markdown
            - match: '[^\s)]+'
              scope: markup.underline.link.image.markdown
            - match: \)
              scope: punctuation.definition.metadata.end.markdown
              pop: true
            - match: (?!\n)\s+(?!\s*(?:[)('"]|$))
              scope: invalid.illegal.unexpected-whitespace.markdown
            - match: (?=\s*(?!\)))
              push: link-title
    - include: immediately-pop

  image-inline-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set:
        - meta_scope: meta.image.inline.markdown
        - include: tag-attributes
    - include: immediately-pop

  image-ref:
    - match: |-
        (?x:
          (\!\[)                             # Images start with ![
          (?=   {{balance_square_brackets}}? # balanced square brackets, backticks, taking into account escapes etc.
                \]                           # Closing square bracket
                \[                           # [
                [^\]]+                       # anything other than ]
                \]                           # ]
          )
        )
      captures:
        1: meta.image.reference.markdown punctuation.definition.image.begin.markdown
      push: [image-ref-attr, image-ref-after-text, image-ref-text]

  image-ref-text:
    - meta_content_scope: meta.image.reference.description.markdown
    - include: link-text
    - match: \]
      scope: meta.image.reference.markdown punctuation.definition.image.end.markdown
      pop: true

  image-ref-after-text:
    - match: (\[)([^\]]+)(\])
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
      scope: meta.image.reference.markdown
      pop: true
    - include: immediately-pop

  image-ref-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set:
        - meta_scope: meta.image.reference.markdown
        - include: tag-attributes
    - include: immediately-pop

  inline:
    - include: escape
    - include: ampersand
    - include: critic-inline
    - include: ligatures
    - include: bracket
    - include: code-span
    - include: link-ref-footnote
    - include: image-inline
    - include: link-inline
    - include: autolink-inet
    - include: autolink-email
    - include: image-ref
    - include: link-ref-literal
    - include: link-ref
  inline-bold-italic:
    - include: inline
    - include: bold
    - include: italic
    - include: strikethrough
  inline-bold-italic-linebreak:
    - include: inline-bold-italic
    - include: hard-line-break
  italic:
    - match: '\*(?=\S)(?!\*)'
      scope: punctuation.definition.italic.begin.markdown
      push:
        - meta_scope: markup.italic.markdown
        - match: |-
              (?x)
                  [ \t]*\*{4,}   # if there are more than 3 its not applicable to be bold or italic
              |   [ \t]+\*(?!\*) # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
              |   ^\*(?!\*)      # emphasis can't be closed at the start of the line
        - match: \*(?!\*[^*])
          scope: punctuation.definition.italic.end.markdown
          pop: true
        - match: \*+
        - include: format-common
        - include: bold
        - include: strikethrough
    - match: '\b_(?=\S)(?!_)'
      scope: punctuation.definition.italic.begin.markdown
      push:
        - meta_scope: markup.italic.markdown
        - match: |-
              (?x)
                  [ \t]*_{4,}   # if there are more than 3 its not applicable to be bold or italic
              |   [ \t]+_(?!_)  # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
              |   ^_(?!_)       # emphasis can't be closed at the start of the line
        - match: _\b
          scope: punctuation.definition.italic.end.markdown
          pop: true
        - include: format-common
        - include: bold
        - include: strikethrough
    - match: '[*_]+'

  strikethrough:
    - match: (?:~(?!~}|>|\s))+  # any number of ~ up to ~> or ~~} critic markers
      scope: punctuation.definition.strikethrough.begin.markdown
      push: strikethrough-content

  strikethrough-content:
    - meta_scope: markup.strikethrough.markdown-gfm
    - match: (?:~(?!~}|>))+     # any number of ~ up to ~> or ~~} critic markers
      scope: punctuation.definition.strikethrough.end.markdown
      pop: true
    - include: format-common
    - include: bold
    - include: italic

  format-common:
    - match: '{{setext_escape}}'
      pop: true
    - match: ^\s*$\n?
      scope: invalid.illegal.non-terminated.bold-italic.markdown
      pop: true
    - include: paragraph-end
    - include: hard-line-break
    - include: inline
    - include: scope:text.html.basic

  hard-line-break:
    - match: '[ ]{2,}$'
      scope: meta.hard-line-break.markdown punctuation.definition.hard-line-break.markdown
    - match: '(\\)$\n'
      scope: meta.hard-line-break.markdown
      captures:
        1: constant.character.escape.markdown

  autolink-email:
    - match: '(<)((?:mailto:)?[-+.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(>)'
      scope: meta.link.email.lt-gt.markdown
      captures:
        1: punctuation.definition.link.begin.markdown
        2: markup.underline.link.markdown
        4: punctuation.definition.link.end.markdown
    - match: '[\w.+-]+@[\w-]+(\.((?![._-][\W])[\w_-])+)+(?![_-])'
      scope: markup.underline.link.markdown

  autolink-inet:
    - match: (<)((?:https?|ftp)://.*?)(>)
      scope: meta.link.inet.markdown
      captures:
        1: punctuation.definition.link.begin.markdown
        2: markup.underline.link.markdown
        3: punctuation.definition.link.end.markdown
    - match: (((https|http|ftp)://)|www\.)[\w-]+(\.[\w-]+)+
      scope: markup.underline.link.markdown-gfm
      push: # After a valid domain, zero or more non-space non-< characters may follow
        - match: (?=[?!.,:*_~]*(?:[\s<]|$)) # Trailing punctuation (specifically, ?, !, ., ,, :, *, _, and ~) will not be considered part of the autolink, though they may be included in the interior of the link
          pop: true
        - match: (?={{html_entity}}[?!.,:*_~]*[\s<]) # If an autolink ends in a semicolon (;), we check to see if it appears to resemble an entity reference; if the preceding text is & followed by one or more alphanumeric characters. If so, it is excluded from the autolink
          pop: true
        - match: \( # When an autolink ends in ), we scan the entire autolink for the total number of parentheses. If there is a greater number of closing parentheses than opening ones, we don’t consider the last character part of the autolink, in order to facilitate including an autolink inside a parenthesis
          push:
            - meta_scope: markup.underline.link.markdown-gfm
            - match: (?=[?!.,:*_~]*[\s<])
              pop: true
            - match: \)
              pop: true
        - match: (?=\)[?!.,:*_~]*[\s<])
          pop: true
        - match: '[^?!.,:*_~\s<&()]+|\S'
          scope: markup.underline.link.markdown-gfm

  link-inline:
    - match: |-
        (?x:
            (\[)
            (?=
                {{balance_square_brackets}}?
                \]
                \(
            )
        )
      captures:
        1: meta.link.inline.markdown punctuation.definition.link.begin.markdown
      push: [link-inline-attr, link-inline-after-text, link-inline-link-text]

  link-inline-after-text:
    - match: \(
      scope: punctuation.definition.metadata.begin.markdown
      set:
        - meta_scope: meta.link.inline.markdown
        - match: \)
          scope: punctuation.definition.metadata.end.markdown
          pop: true
        - match: <(?=[^>)]*>)
          scope: punctuation.definition.link.begin.markdown
          push:
            - match: \>
              scope: punctuation.definition.link.end.markdown
              set: link-title
            - match: \s+
              scope: invalid.illegal.unexpected-whitespace.markdown
        - match: (?=\S)
          set:
            - meta_scope: meta.link.inline.markdown
            - match: '[^\s)]+'
              scope: markup.underline.link.markdown
            - match: \)
              scope: punctuation.definition.metadata.end.markdown
              pop: true
            - match: (?!\n)\s+(?!\s*(?:[)('"]|$))
              scope: invalid.illegal.unexpected-whitespace.markdown
            - match: (?=\s*(?!\)))
              push: link-title
    - include: immediately-pop

  link-inline-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set:
        - meta_scope: meta.link.inline.markdown
        - include: tag-attributes
    - include: immediately-pop

  link-inline-link-text:
    - meta_content_scope: meta.link.inline.description.markdown
    - include: link-text-allow-image
    - match: \]
      scope: meta.link.inline.markdown punctuation.definition.link.end.markdown
      pop: true

  link-ref:
    - match: |-
        (?x:
          (\[)
          (?=   {{balance_square_brackets}}? # balanced square brackets, backticks, taking into account escapes etc.
                \]                           # Closing square bracket
                \[                           # [
                [^\]]+                       # anything other than ]
                \]                           # ]
          )
        )
      captures:
        1: meta.link.reference.markdown punctuation.definition.link.begin.markdown
      push: [link-ref-attr, link-ref-after-text, link-ref-link-text]
    - match: |-
        (?x:
          (\[)(?!\^)
          (?=   {{balance_square_brackets}}? # balanced square brackets, backticks, taking into account escapes etc.
                \]
          )
        )
      captures:
        1: meta.link.reference.markdown punctuation.definition.link.begin.markdown
      push: link-ref-link-text

  link-ref-link-text:
    - meta_content_scope: meta.link.reference.description.markdown
    - include: link-text-allow-image
    - match: \]
      scope: meta.link.reference.markdown punctuation.definition.link.end.markdown
      pop: true

  link-ref-after-text:
    - match: (\[)([^\]]+)(\])
      scope: meta.link.reference.markdown
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
      pop: true
    - include: immediately-pop

  link-ref-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set:
        - meta_scope: meta.link.reference.markdown
        - include: tag-attributes
    - include: immediately-pop

  link-ref-literal:
    - match: |-
        (?x:
          (\[)
          (?=
              {{balance_square_brackets}}? # balanced square brackets, backticks, taking into account escapes etc.
              \]                           # Closing square bracket
              \[                           # [
              \]                           # ]
          )
        )
      captures:
        1: meta.link.reference.literal.markdown punctuation.definition.link.begin.markdown
      push: [link-ref-literal-attr, link-ref-literal-after-text, link-ref-literal-link-text]

  link-ref-literal-link-text:
    - meta_content_scope: meta.link.reference.literal.description.markdown
    - include: link-text-allow-image
    - match: \]
      scope: meta.link.reference.literal.markdown punctuation.definition.link.end.markdown
      pop: true

  link-ref-literal-after-text:
    - match: (\[)(\])
      scope: meta.link.reference.literal.markdown
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: punctuation.definition.constant.end.markdown
      pop: true
    - include: immediately-pop

  link-ref-literal-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set:
        - meta_scope: meta.link.reference.literal.markdown
        - include: tag-attributes
    - include: immediately-pop

  link-ref-footnote:
    - match: |-
        (?x:
          (\[\^)
          ([^]]+)
          (\])
        )
      captures:
        0: meta.link.reference.footnote.markdown-extra
        1: punctuation.definition.link.begin.markdown
        2: meta.link.reference.literal.footnote-id.markdown
        3: punctuation.definition.link.end.markdown

  reference-link-definition:
    - match: |-
        (?x:
            [ ]{0,3}                     # Leading whitespace
            (\[)(|(?:\\\]|[^]])+)(\])(:) # Reference name
            [ \t]*                       # Optional whitespace
            (?:
              (<)([^>]*)(>)              # The url
            | (\S+)                      # The url
            )
        )
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: entity.name.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
        4: punctuation.separator.key-value.markdown
        5: punctuation.definition.link.begin.markdown
        6: markup.underline.link.markdown
        7: punctuation.definition.link.end.markdown
        8: markup.underline.link.markdown
      push: [link-ref-def-expect-end, link-title]

  list-paragraph:
    - match: '^(?=(?:[ ]{4}|\t){2,}(?![>+*\s-]))(?={{indented_code_block}})'
      push:
        - include: indented-code-block
        - match: $
          pop: true
    - match: ^[ ]*{{block_quote}}
      captures:
        1: punctuation.definition.blockquote.markdown
      push:
        - block-quote-meta
        - block-quote-content
    - include: fenced-code-blocks
    - include: reference-link-definition
    - match: \s+(?=\S)
      push:
        - match: ^\s*$
          pop: true
        - match: ([ ]*)([*+-])((?:[ ](\[[ xX]\]))?\s)
          captures:
            1: markup.list.unnumbered.markdown
            2: markup.list.unnumbered.bullet.markdown punctuation.definition.list_item.markdown
            3: markup.list.unnumbered.markdown
            4: constant.language.checkbox.markdown-gfm
          push:
            - clear_scopes: 1
            - meta_content_scope: markup.list.unnumbered.markdown meta.paragraph.list.markdown
            - include: list-content
        - match: ([ ]*)(\d+([.)]))(?=\s)
          captures:
            1: markup.list.numbered.markdown
            2: markup.list.numbered.bullet.markdown
            3: punctuation.definition.list_item.markdown
          push:
            - clear_scopes: 1
            - meta_content_scope: markup.list.numbered.markdown meta.paragraph.list.markdown
            - include: list-content
        - match: \s+
          scope: meta.paragraph.list.markdown
        - match: (?=^{{atx_heading}})
          pop: true
        - match: '(?=\S)'
          push: list-content
    - match: '(?=\S)'
      pop: true
  list-content:
    - meta_content_scope: meta.paragraph.list.markdown
    - include: fenced-code-blocks
    - match: ^
      pop: true
    - include: thematic-break
    - match: (?=\S)(?!{{list_item}})
      push:
        - match: (?={{list_item}})
          pop: true
        - include: inline-bold-italic-linebreak
        - include: scope:text.html.basic
        - match: $
          pop: true

################################################
############## FENCED CODE BLOCKS ##############
################################################

  fenced-code-blocks:
    - match: ^(?={{fenced_code_block_start}})
      push: fenced-code-block-content

  fenced-code-block-content:
    - match: $
      pop: true
    - include: fenced-syntaxes
    - include: fenced-raw

  fenced-syntaxes:
    - include: fenced-clojure
    - include: fenced-c
    - include: fenced-cpp
    - include: fenced-csharp
    - include: fenced-diff
    - include: fenced-erlang
    - include: fenced-graphviz
    - include: fenced-golang
    - include: fenced-haskell
    - include: fenced-html-php
    - include: fenced-html
    - include: fenced-java
    - include: fenced-javascript
    - include: fenced-jsonc
    - include: fenced-jspx
    - include: fenced-jsx
    - include: fenced-lisp
    - include: fenced-lua
    - include: fenced-matlab
    - include: fenced-objc
    - include: fenced-objcpp
    - include: fenced-ocaml
    - include: fenced-perl
    - include: fenced-php
    - include: fenced-python
    - include: fenced-regexp
    - include: fenced-rscript
    - include: fenced-ruby
    - include: fenced-rust
    - include: fenced-scala
    - include: fenced-shell-script
    - include: fenced-sql
    - include: fenced-tsx
    - include: fenced-typescript
    - include: fenced-xml
    - include: fenced-yaml

  fenced-clojure:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:clojure|clj))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.clojure.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.clojure
      embed_scope: markup.raw.code-fence.clojure.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.clojure.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-c:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:c))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.c.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.c
      embed_scope: markup.raw.code-fence.c.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.c.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-cpp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:c\+\+|cpp))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.c++.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.c++
      embed_scope: markup.raw.code-fence.c++.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.c++.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-csharp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:csharp|c\#|cs))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.csharp.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.cs
      embed_scope: markup.raw.code-fence.csharp.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.csharp.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-diff:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:diff|patch))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.diff.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.diff
      embed_scope: markup.raw.code-fence.diff.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.diff.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-erlang:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:erlang|escript))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.erlang.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.erlang
      embed_scope: markup.raw.code-fence.erlang.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.erlang.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-graphviz:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:graphviz))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.graphviz.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.dot
      embed_scope: markup.raw.code-fence.graphviz.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.graphviz.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-golang:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:go(?:lang)?))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.go.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.go
      embed_scope: markup.raw.code-fence.go.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.go.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-haskell:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:haskell))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.haskell.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.haskell
      embed_scope: markup.raw.code-fence.haskell.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.haskell.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-html-php:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:html\+php))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.html-php.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:embedding.php
      embed_scope: markup.raw.code-fence.html-php.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.html-php.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-html:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:html))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.html.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:text.html.basic
      embed_scope: markup.raw.code-fence.html.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.html.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-java:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:java))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.java.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.java
      embed_scope: markup.raw.code-fence.java.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.java.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-javascript:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:javascript|js))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.javascript.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.js
      embed_scope: markup.raw.code-fence.javascript.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.javascript.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-jsonc:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:jsonc?))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.json.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.json
      embed_scope: markup.raw.code-fence.json.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.json.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-jspx:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:jspx?))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.jsp.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:text.html.jsp
      embed_scope: markup.raw.code-fence.jsp.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.jsp.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-jsx:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:jsx))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.jsx.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.jsx
      embed_scope: markup.raw.code-fence.jsx.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.jsx.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-lisp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:lisp))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.lisp.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.lisp
      embed_scope: markup.raw.code-fence.lisp.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.lisp.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-lua:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:lua))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.lua.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.lua
      embed_scope: markup.raw.code-fence.lua.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.lua.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-matlab:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:matlab))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.matlab.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.matlab
      embed_scope: markup.raw.code-fence.matlab.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.matlab.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-objc:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:objc|obj-c|objectivec|objective-c))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.objc.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.objc
      embed_scope: markup.raw.code-fence.objc.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.objc.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-objcpp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:objc\+\+|obj-c\+\+|objectivec\+\+|objective-c\+\+))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.objc++.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.objc++
      embed_scope: markup.raw.code-fence.objc++.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.objc++.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-ocaml:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:ocaml))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.ocaml.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.ocaml
      embed_scope: markup.raw.code-fence.ocaml.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.ocaml.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-perl:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:perl))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.perl.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.perl
      embed_scope: markup.raw.code-fence.perl.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.perl.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-php:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:php|inc))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.php.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.php
      embed_scope: markup.raw.code-fence.php.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.php.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-python:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:python|py))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.python.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.python
      embed_scope: markup.raw.code-fence.python.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.python.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-regexp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:regexp?))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.regexp.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.regexp
      embed_scope: markup.raw.code-fence.regexp.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.regexp.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-rscript:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:rscript|r|splus))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.r.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.r
      embed_scope: markup.raw.code-fence.r.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.r.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-ruby:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:ruby|rb|rbx))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.ruby.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.ruby
      embed_scope: markup.raw.code-fence.ruby.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.ruby.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-rust:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:rust|rs))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.rust.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.rust
      embed_scope: markup.raw.code-fence.rust.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.rust.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-scala:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:scala))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.scala.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.scala
      embed_scope: markup.raw.code-fence.scala.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.scala.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-shell-script:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:shell(?:-script)?|sh|bash|zsh))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.shell-script.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.shell.bash
      embed_scope: markup.raw.code-fence.shell-script.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.shell-script.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-sql:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:sql))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.sql.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.sql
      embed_scope: markup.raw.code-fence.sql.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.sql.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-tsx:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:tsx))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.tsx.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.tsx
      embed_scope: markup.raw.code-fence.tsx.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.tsx.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-typescript:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:typescript|ts))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.typescript.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.ts
      embed_scope: markup.raw.code-fence.typescript.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.typescript.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-xml:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:xml))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.xml.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:text.xml
      embed_scope: markup.raw.code-fence.xml.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.xml.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-yaml:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:yaml))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.yaml.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.yaml
      embed_scope: markup.raw.code-fence.yaml.markdown-gfm
      escape: '{{code_fence_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.yaml.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-raw:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          {{fenced_code_block_language}}?
          .*$\n?       # all characters until EOL
      captures:
        0: meta.code-fence.definition.begin.text.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      push: fenced-raw-content

  fenced-raw-content:
    - meta_content_scope: markup.raw.code-fence.markdown-gfm
    - match: '{{code_fence_escape}}'
      captures:
        0: meta.code-fence.definition.end.text.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown
      pop: true

  code-span:
    - match: (`+)(?!`)
      scope: punctuation.definition.raw.begin.markdown
      push:
        - meta_scope: markup.raw.inline.markdown
        - match: \1(?!`)
          scope: punctuation.definition.raw.end.markdown
          pop: true
        - match: '`+'
        - match: ^\s*$\n?
          scope: invalid.illegal.non-terminated.raw.markdown
          pop: true
        - include: paragraph-end

  thematic-break:
    - match: (?={{thematic_break}})
      push:
        - meta_scope: meta.separator.thematic-break.markdown
        - match: '[-_*]+'
          scope: punctuation.definition.thematic-break.markdown
        - match: '$\n?'
          pop: true

  disable-markdown:
    - include: scope:text.html.basic
  disable-markdown-pop-at-tag:
    - match: (</)(\1)(>)
      captures:
        1: meta.tag.block.any.html punctuation.definition.tag.begin.html
        2: meta.tag.block.any.html entity.name.tag.block.any.html
        3: meta.tag.block.any.html punctuation.definition.tag.end.html
      pop: true
    - include: disable-markdown
  disable-markdown-pop-after-tag:
    - match: (?!</?(?i:script|style)\b)
      pop: true
    - include: disable-markdown
  disable-markdown-pop-at-blank-line:
    - match: ^\s*$
      pop: true
    - include: disable-markdown
  disable-markdown-pop-after-cdata:
    - match: (?!<!\[CDATA\[)
      pop: true
    - include: disable-markdown
  disable-markdown-pop-at-php:
    - match: \?>
      pop: true
    - include: disable-markdown
  disable-markdown-pop-after-html-doctype:
    - match: (?!<!([A-Z]|--))
      pop: true
    - include: disable-markdown
  disabled-markdown-pop-at-eol:
    - meta_content_scope: meta.disable-markdown
    - match: $\n?
      scope: meta.disable-markdown
      pop: true
    - include: disable-markdown
  link-text:
    - match: \b__?(?=[^]_]+\]) # eat underscores where there is no pair before the end of the square brackets - it's not a formatting mark
    - match: \b\*\*?(?=[^]*]+\]) # eat asterisks where there is no pair before the end of the square brackets - it's not a formatting mark
    - include: escape
    - include: ampersand
    - include: code-span
    - match: \[ # nested square brackets are allowed
      push:
        - include: link-text
        - match: \]
          pop: true
    - include: bold
    - include: italic
    - include: hard-line-break
    - include: scope:text.html.basic
  link-text-allow-image:
    - include: link-text
    - include: image-inline
    - include: image-ref
  link-title:
    - match: \'
      scope: punctuation.definition.string.begin.markdown
      set:
        - meta_scope: string.other.link.description.title.markdown
        - match: \'
          scope: punctuation.definition.string.end.markdown
          pop: true
        - include: non-terminated-link-title
    - match: \"
      scope: punctuation.definition.string.begin.markdown
      set:
        - meta_scope: string.other.link.description.title.markdown
        - match: \"
          scope: punctuation.definition.string.end.markdown
          pop: true
        - include: non-terminated-link-title
    - match: \(
      scope: punctuation.definition.string.begin.markdown
      set:
        - meta_scope: string.other.link.description.title.markdown
        - match: \)
          scope: punctuation.definition.string.end.markdown
          pop: true
        - include: non-terminated-link-title
    - match: $|(?=\S)
      pop: true
  non-terminated-link-title:
    - match: ^\s*$\n?
      scope: invalid.illegal.non-terminated.link-title.markdown
      pop: true
  link-ref-def-expect-end:
    - meta_scope: meta.link.reference.def.markdown
    - match: $
      pop: true
    - match: \s*\S+
      scope: invalid.illegal.expected-eol.markdown

###[ LINK/IMAGE/REFERENCE ATTRIBUTES ]########################################

  tag-attributes:
    # https://kramdown.gettalong.org/syntax.html#span-ials
    # https://michelf.ca/projects/php-markdown/extra/
    # https://pandoc.org/MANUAL.html#extension-link_attributes
    - match: \}
      scope: punctuation.definition.attributes.end.markdown
      pop: true
    - match: \,
      scope: punctuation.separator.mapping.pair.markdown
    - match: '{{tag_attribute_name_start}}'
      push: [tag-attr-meta, tag-attr-equals, tag-attr-name]

  tag-attr-name:
    - meta_scope: entity.other.attribute-name.markdown
    - match: '{{tag_attribute_name_break}}'
      pop: true
    - match: '["''`<]'
      scope: invalid.illegal.attribute-name.markdown

  tag-attr-meta:
    - meta_scope: meta.attribute-with-value.markdown
    - include: immediately-pop

  tag-attr-equals:
    - match: =
      scope: punctuation.separator.key-value.markdown
      set: tag-attr-value
    - include: else-pop

  tag-attr-value:
    - match: \"
      scope: punctuation.definition.string.begin.markdown
      set:
        - meta_scope: string.quoted.double.markdown
        - match: \"
          scope: punctuation.definition.string.end.markdown
          pop: true
    - match: \'
      scope: punctuation.definition.string.begin.markdown
      set:
        - meta_scope: string.quoted.single.markdown
        - match: \'
          scope: punctuation.definition.string.end.markdown
          pop: true
    - match: '{{tag_unquoted_attribute_start}}'
      set:
        - meta_scope: string.unquoted.markdown
        - match: '{{tag_unquoted_attribute_break}}'
          pop: true
        - match: '["''`<]'
          scope: invalid.illegal.attribute-value.markdown
    - include: else-pop


###[ TABLE ]##################################################################

  table:
    - match: ^(?={{table_first_row}})
      push:
        - meta_content_scope: meta.table.header.markdown-gfm
        - match: \|
          scope: punctuation.separator.table-cell.markdown
        - include: inline-bold-italic
        - match: $\n?
          set:
            - match: ^
              set:
                - meta_content_scope: meta.table.header-separator.markdown-gfm
                - match: \|
                  scope: punctuation.separator.table-cell.markdown
                - match: ':'
                  scope: punctuation.definition.table-cell-alignment.markdown
                - match: -+
                  scope: punctuation.section.table-header.markdown
                - match: $\n?
                  set:
                    - meta_content_scope: meta.table.markdown-gfm
                    - match: |- # The table is broken at the first empty line, or beginning of another block-level structure
                          (?x)^
                          (?=  {{block_quote}}
                          |    {{indented_code_block}}(?!$)
                          |    {{atx_heading}}
                          |    {{thematic_break}}
                          |    \s*$
                          )
                      pop: true
                    - match: \|
                      scope: punctuation.separator.table-cell.markdown
                    - match: (?={{balanced_emphasis}})
                      push:
                        - include: bold
                        - include: italic
                        - match: ''
                          pop: true
                    - match: |-
                        (?x)
                        (?!{{backticks}})
                        `+
                      scope: invalid.deprecated.unescaped-backticks.markdown
                    - include: inline
                    - include: scope:text.html.basic

###[ CRITIC MARKUP ]##########################################################

  critic-inline:
    # inline critic markup
    # http://criticmarkup.com/spec.php
    - include: critic-inline-additions
    - include: critic-inline-comments
    - include: critic-inline-deletions
    - include: critic-inline-highlights
    - include: critic-inline-substitutions

  critic-inline-additions:
    - match: \{\+\+
      scope: punctuation.definition.critic.begin.markdown
      push: critic-inline-addition-content

  critic-inline-addition-content:
    - meta_scope: markup.critic.addition.markdown
    - meta_content_scope: markup.inserted.critic.markdown
    - match: \+\+\}
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critic-inline-common

  critic-inline-comments:
    - match: '{>>'
      scope: punctuation.definition.critic.begin.markdown
      push: critic-inline-comment-content

  critic-inline-comment-content:
    - meta_scope: markup.critic.comment.markdown
    - meta_content_scope: comment.critic.markdown
    - match: '<<}'
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critic-inline-common

  critic-inline-deletions:
    - match: '{--'
      scope: punctuation.definition.critic.begin.markdown
      push: critic-inline-deletion-content

  critic-inline-deletion-content:
    - meta_scope: markup.critic.deletion.markdown
    - meta_content_scope: markup.deleted.critic.markdown
    - match: '--}'
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critic-inline-common

  critic-inline-highlights:
    - match: '{=='
      scope: punctuation.definition.critic.begin.markdown
      push: critic-inline-highlight-content

  critic-inline-highlight-content:
    - meta_scope: markup.critic.highlight.markdown
    - meta_content_scope: markup.info.critic.markdown
    - match: '==}'
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critic-inline-common

  critic-inline-substitutions:
    - match: '{~~'
      scope: punctuation.definition.critic.begin.markdown
      push: critic-inline-substitution-deleted

  critic-inline-substitution-deleted:
    - meta_scope: markup.critic.substitution.markdown
    - meta_content_scope: markup.deleted.critic.markdown
    - match: (?=~>)
      set:
        - meta_include_prototype: false
        - match: '~>'
          scope: punctuation.separator.critic.markdown
          set: critic-inline-substitution-inserted
    - include: critic-inline-substitution-inserted

  critic-inline-substitution-inserted:
    - meta_scope: markup.critic.substitution.markdown
    - meta_content_scope: markup.inserted.critic.markdown
    - match: '~~}'
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critic-inline-common

  critic-inline-common:
    - match: ^(?=\s*$)
      pop: true
    - include: inline-bold-italic

###[ PROTOTYPES ]#############################################################

  else-pop:
    - match: (?=\S)
      pop: true

  immediately-pop:
    - match: ''
      pop: true